{
	"info": {
		"_postman_id": "eb7b0ab0-4d15-4bbd-add5-5a5ced2d4688",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30001523"
	},
	"item": [
		{
			"name": "/register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// postman.clearEnviromentVariable(\"access_token\")\r",
							"tests['Response time is less than 200ms'] = responseTime<210\r",
							"\r",
							"var jsonData = JSON.parse(responseBody)\r",
							"\r",
							"tests[\"user created successfully\"] = jsonData.message === 'user created successfully.'\r",
							"tests[\"Content_type is present in response\"] = postman.getResponseHeader('Content-Type');\r",
							"tests[\"Content_type is appl-ication/json\"] = postman.getResponseHeader('Content-Type') === 'application/json'"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"user6\",\r\n    \"password\":\"abc123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token)\r",
							"\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"tests[\"body contains access_token\"] = responseBody.has(\"access_token\")\r",
							"\r",
							"tests[\"Response time is less than 150ms\"] = responseTime < 150;"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "JWT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\":\"user6\",\r\n    \"password\":\"abc123\"\r\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/auth",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "store/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/store/test",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"store",
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "/stores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"tests[\"store test is returned\"] = jsonData.stores[0].name === 'test';"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/stores",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"stores"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseJson = pm.response.json(); // Parse the response JSON\r",
							"\r",
							"// Check if the status code is 201\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Check if \"items\" property exists in the response JSON\r",
							"pm.test(\"Check if 'items' property exists\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"items\");\r",
							"});\r",
							"\r",
							"// Check if the \"items\" property is initially empty\r",
							"pm.test(\"Items should be initially empty\", function () {\r",
							"    pm.expect(responseJson.items).to.be.an('array').that.is.empty;\r",
							"});\r",
							"\r",
							"// var jsonData = JSON.parse(responseBody);\r",
							"// tests[\"store items are empty list\"] = jsonData.items.length === 0;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/store/my",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"store",
						"my"
					]
				}
			},
			"response": []
		},
		{
			"name": "/store/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Deleted  store\"] = responseCode.code === 200"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/store/bakeries",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"store",
						"bakeries"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/<name>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\" item added  \"] = responseCode.code === 201\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "JWT",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"price\":19.99,\r\n    \"store_id\": 1\r\n}\r\n"
				},
				"url": {
					"raw": "http://127.0.0.1:5000/item/bakeries",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"item",
						"bakeries"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"retirve the items form test\"] = responseCode.code === 200"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "JWT {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/item/test",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"item",
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "/item/my_item",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"tests[\"Deleted item in store\"] = responseCode.code === 200"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/item/bakeries",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"item",
						"bakeries"
					]
				}
			},
			"response": []
		},
		{
			"name": "/items",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}